; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: npx shadow-cljs -d cider/cider-nrepl:0.26.0 watch :app
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉>  ; Use `alt+enter` to evaluate
0.7853981633974483
clj꞉trig.triangle꞉> 
0.7853981633974483
clj꞉trig.triangle꞉> 
4
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 nil nil], :angles [177.64380550980766 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
nil
clj꞉uc.generate꞉> 
#'uc.generate/tex2svg
clj꞉uc.generate꞉> 
#'uc.generate/uppercase-letters
clj꞉uc.generate꞉> 
#'uc.generate/uppercase-letters
clj꞉uc.generate꞉> 
({:n "letter-A", :f "A"}
 {:n "letter-B", :f "B"}
 {:n "letter-C", :f "C"}
 {:n "letter-D", :f "D"}
 {:n "letter-E", :f "E"}
 {:n "letter-F", :f "F"}
 {:n "letter-G", :f "G"}
 {:n "letter-H", :f "H"}
 {:n "letter-I", :f "I"}
 {:n "letter-J", :f "J"}
 {:n "letter-K", :f "K"}
 {:n "letter-L", :f "L"}
 {:n "letter-M", :f "M"}
 {:n "letter-N", :f "N"}
 {:n "letter-O", :f "O"}
 {:n "letter-P", :f "P"}
 {:n "letter-Q", :f "Q"}
 {:n "letter-R", :f "R"}
 {:n "letter-S", :f "S"}
 {:n "letter-T", :f "T"}
 {:n "letter-U", :f "U"}
 {:n "letter-V", :f "V"}
 {:n "letter-W", :f "W"}
 {:n "letter-X", :f "X"}
 {:n "letter-Y", :f "Y"}
 {:n "letter-Z", :f "Z"})
clj꞉uc.generate꞉> 
#'uc.generate/pi-fracs
clj꞉uc.generate꞉> 
#'uc.generate/renderer
clj꞉uc.generate꞉> 
(nil nil nil nil nil nil nil nil nil)
clj꞉uc.generate꞉> 
#'uc.generate/pi-fracs
clj꞉uc.generate꞉> 
(nil nil nil nil nil nil nil nil nil)
clj꞉uc.generate꞉> 
[0.7853981633974483 1.5707963267948966 0.7853981633974483]
clj꞉trig.triangle꞉> 
{0.7853981633974483 2, 1.5707963267948966 1}
clj꞉trig.triangle꞉> 
(2 1)
clj꞉trig.triangle꞉> 
#{1 2}
clj꞉trig.triangle꞉> 
(1 2)
clj꞉trig.triangle꞉> 
(1 2 3)
clj꞉trig.triangle꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:77
 Use of undeclared Var trig.triangle/triangle
--------------------------------------------------------------------------------

clj꞉trig.triangle꞉> 
(1 2 3)
clj꞉trig.triangle꞉> 
(1 2 3)
clj꞉trig.triangle꞉> 
()
clj꞉trig.triangle꞉> 
(2)
clj꞉trig.triangle꞉> 
(1 3)
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 nil nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 3 nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
nil
clj꞉trig.triangle-test꞉> 
#'trig.triangle-test/round
clj꞉trig.triangle-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:10
 Use of undeclared Var trig.triangle-test/two-angles-test
--------------------------------------------------------------------------------

clj꞉trig.triangle-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:10
 Use of undeclared Var trig.triangle-test/two-angles-test
--------------------------------------------------------------------------------

clj꞉trig.triangle-test꞉> 
nil
clj꞉trig.triangle-test꞉> 
#'trig.triangle-test/round
clj꞉trig.triangle-test꞉> 
#'trig.triangle-test/two-angles-test
clj꞉trig.triangle-test꞉> 
#'trig.triangle-test/one-side-all-angles-test
clj꞉trig.triangle-test꞉> 
#'trig.triangle-test/two-sides-one-angle-test
clj꞉trig.triangle-test꞉> 

Testing trig.triangle-test


FAIL in (two-angles-test) (repl-input.cljs:2:7)

expected: (= 35 (:angle3 (tri/solve-triangle {:angle1 40, :angle2 105})))

  actual: (not (= 35 nil))


FAIL in (one-side-all-angles-test) (repl-input.cljs:2:7)

expected: (= 5.27 (round (:line2 (tri/solve-triangle {:angle3 35, :angle1 40, :angle2 105, :line1 4.7})) 100))

  actual: (not (= 5.27 0))


FAIL in (one-side-all-angles-test) (repl-input.cljs:6:7)

expected: (= 36 (round (:line2 (tri/solve-triangle {:angle3 109, :angle1 47, :angle2 24, :line1 46})) 1))

  actual: (not (= 36 0))


FAIL in (two-sides-one-angle-test) (repl-input.cljs:2:7)

expected: (= 184 (round (:line1 (tri/solve-triangle {:angle3 3, :line2 915, :line3 736})) 1))

  actual: (not (= 184 0))


FAIL in (two-sides-one-angle-test) (repl-input.cljs:5:7)

expected: (= 262 (round (:line2 (tri/solve-triangle {:line3 250, :angle1 56, :line1 300})) 1))

  actual: (not (= 262 0))


Ran 3 tests containing 5 assertions.

5 failures, 0 errors.

nil
clj꞉trig.triangle-test꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
0.7853981633974483
clj꞉trig.triangle꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:20:3
 Use of undeclared Var trig.triangle/sides
--------------------------------------------------------------------------------

clj꞉trig.triangle꞉> 
0.7853981633974483
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
("TS" "RT")
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
(1 3)
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 nil "poo"], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
1
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 "poo" nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 "poo" nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
nil
; ------ WARNING - :fn-arity -----------------------------------------------------
;  Resource: <eval>:24:5
 Wrong number of args (5) passed to cljs.core/assoc-in
--------------------------------------------------------------------------------

clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 "poo" nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines ["poo2" "poo" nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides
clj꞉trig.triangle꞉> 
{:vertices ["R" "T" "S"], :lines [3 3 nil], :angles [0.7853981633974483 1.5707963267948966 0.7853981633974483]}
clj꞉trig.triangle꞉> 
#'trig.triangle/iso-sides?
clj꞉trig.triangle꞉> 
true
clj꞉trig.triangle꞉> 
false
clj꞉trig.triangle꞉> 
true
clj꞉trig.triangle꞉> 
